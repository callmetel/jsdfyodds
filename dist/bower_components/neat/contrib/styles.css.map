{"version":3,"sources":["bower_components/neat/app/assets/stylesheets/grid/_box-sizing.scss","bower_components/neat/contrib/styles.scss","bower_components/neat/app/assets/stylesheets/mixins/_clearfix.scss","bower_components/neat/app/assets/stylesheets/grid/_outer-container.scss","bower_components/neat/app/assets/stylesheets/grid/_span-columns.scss","bower_components/neat/app/assets/stylesheets/grid/_private.scss","bower_components/neat/app/assets/stylesheets/grid/_omega.scss","bower_components/neat/app/assets/stylesheets/grid/_row.scss","bower_components/neat/app/assets/stylesheets/grid/_fill-parent.scss","bower_components/neat/app/assets/stylesheets/grid/_shift.scss","bower_components/neat/app/assets/stylesheets/functions/_private.scss","bower_components/neat/app/assets/stylesheets/grid/_media.scss"],"names":[],"mappings":"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","file":"styles.css","sourcesContent":["@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n","@import \"../app/assets/stylesheets/neat\";\n\n// Grid Settings\n$column: 90px;\n$gutter: 30px;\n$grid-columns: 12;\n$max-width: 1200px;\n\n// Media\n$medium-screen: 600px;\n$large-screen: 900px;\n\n$medium-screen-up: new-breakpoint(min-width $medium-screen 4);\n$large-screen-up: new-breakpoint(min-width $large-screen 8);\n\n// Base\n$base-line-height: 1.625;\n$base-spacing: $base-line-height * 1em;\n\n// Visual Grid\n$visual-grid: true;\n$visual-grid-color: #e6f6ff;\n$visual-grid-opacity: 0.4;\n\n// Colors\n$white: #fafafa;\n$lightblue: #d5eefb;\n$blue: #aadbf5;\n$darkblue: #41a8df;\n$darkerblue: #072f44;\n\n// Base\n// ============================================\n\nbody {\n  color: $darkerblue;\n  font-family: sans-serif;\n  line-height: $base-line-height;\n  margin: 0 0 (1.5rem * 2);\n  text-align: center;\n}\n\nh3 {\n  margin: 1em;\n}\n\na,\na:visited {\n  color: inherit;\n}\n\npre {\n  line-height: 1.6em;\n}\n\ncode {\n  display: block;\n}\n\n// Header\n// ============================================\n\n.container {\n  margin: 0 auto;\n  max-width: 500px;\n  padding: 0 $gutter;\n  position: relative;\n}\n\n.welcome-message {\n  @include clearfix();\n  background-color: $blue;\n  margin-bottom: 1.5rem;\n  padding: $base-spacing 0;\n  text-align: center;\n}\n\n.welcome-message-title {\n  font-weight: 200;\n  line-height: 1;\n}\n\n// ============================================\n\n.code {\n  @include outer-container();\n  background-color: $lightblue;\n  padding: 0.5em;\n  text-align: center;\n}\n\n.page-section {\n  @include outer-container;\n  background-color: $lightblue;\n  line-height: $base-line-height * 1.5;\n  margin-bottom: 3em;\n  text-align: center;\n}\n\n.page-section-inner {\n  background-color: $blue;\n  font-size: 0.8em;\n  height: $base-line-height * 4rem;\n  line-height: $base-line-height;\n  margin-bottom: 2em;\n  padding: 1em;\n  text-align: left;\n}\n\n// Zero\n// ============================================\n\n.zero-alpha,\n.zero-beta {\n  @include span-columns(6);\n  height: $base-line-height * 4rem;\n  line-height: $base-line-height;\n  padding: 1em;\n  text-align: left;\n}\n\n// First\n// ============================================\n\n.first-alpha {\n  @include span-columns(1);\n}\n\n.first-beta {\n  @include span-columns(11);\n}\n\n.first-gamma {\n  @include span-columns(2);\n}\n\n.first-delta {\n  @include span-columns(10);\n}\n\n.first-epsilon {\n  @include span-columns(3);\n}\n\n.first-zeta {\n  @include span-columns(9);\n}\n\n.first-eta {\n  @include span-columns(4);\n}\n\n.first-theta {\n  @include span-columns(8);\n}\n\n.first-iota {\n  @include span-columns(5);\n}\n\n.first-kappa {\n  @include span-columns(7);\n}\n\n.first-lambda {\n  @include span-columns(6);\n}\n\n.first-mu {\n  @include span-columns(6);\n}\n\n.first-beta,\n.first-delta,\n.first-zeta,\n.first-theta,\n.first-kappa,\n.first-mu {\n  @include omega;\n}\n\n// Second\n// ============================================\n\n.second-alpha {\n  @include span-columns(4);\n}\n\n.second-beta {\n  @include span-columns(8);\n  line-height: $base-line-height * 2;\n  padding: 0;\n  text-align: center;\n}\n\n.second-beta-alpha,\n.second-beta-beta {\n  @include span-columns(4 of 8);\n  background-color: $lightblue;\n  height: 84%;\n  padding: 1em;\n}\n\n// Third\n// ===================================\n\n.third-dummy {\n  border-bottom: 0;\n  height: 5.5em;\n  text-align: center;\n}\n\n.third-alpha {\n  @include fill-parent();\n  @include row(table);\n  margin-bottom: 0;\n  padding: 0;\n}\n\n.third-alpha-alpha {\n  @include span-columns(4);\n  border-right: 1px solid rgba($white, 0.5);\n}\n\n.third-alpha-beta {\n  @include reset-display;\n  @include span-columns(8);\n  height: 20em;\n}\n\n// Fourth\n// ===================================\n\n.fourth {\n\n  .fourth-alpha {\n    @include span-columns(6);\n    @include shift(3);\n    height: 20em;\n    text-align: center;\n  }\n}\n\n// Fifth\n// ===================================\n\n.fifth-box {\n  @include omega(4n);\n  @include span-columns(3);\n  font-size: 0.78em;\n  height: 8em;\n  margin-top: 2em;\n}\n\n// Fifth\n// ===================================\n\n.sixth {\n  @include media($medium-screen) {\n    font-size: 0.9em;\n    line-height: 1.5em;\n  }\n\n  pre {\n    padding: 10px 0;\n  }\n}\n\n.sixth-alpha,\n.sixth-beta {\n  line-height: 2em;\n  min-height: 20em;\n  padding: 1em;\n  text-align: left;\n}\n\n.sixth-alpha {\n  @include span-columns(4);\n\n  @include media($medium-screen) {\n    @include span-columns(3);\n  }\n}\n\n.sixth-beta {\n  @include span-columns(8);\n\n  @include media($medium-screen) {\n    @include span-columns(3);\n  }\n}\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://goo.gl/yP5hiZ\n///\n/// @example scss\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: block;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centering it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number [unit]} $local-max-width [$max-width]\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n///\n/// @param {String} $display [block]\n///   Sets the display property of the element. By default it sets the display property of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n","$parent-columns: $grid-columns !default;\n$fg-column: $column;\n$fg-gutter: $gutter;\n$fg-max-columns: $grid-columns;\n$container-display-table: false !default;\n$layout-direction: LTR !default;\n\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($width / $container-width);\n}\n\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($gutter / $container-width);\n}\n\n@function grid-width($n) {\n  @return $n * $gw-column + ($n - 1) * $gw-gutter;\n}\n\n@function get-parent-columns($columns) {\n  @if $columns != $grid-columns {\n    $parent-columns: $columns !global;\n  } @else {\n    $parent-columns: $grid-columns !global;\n  }\n\n  @return $parent-columns;\n}\n\n@function is-display-table($container-is-display-table, $display) {\n  @return $container-is-display-table == true or $display == table;\n}\n","@charset \"UTF-8\";\n\n/// Removes the element's gutter margin, regardless of its position in the grid hierarchy or display property. It can target a specific element, or every `nth-child` occurrence. Works only with `block` layouts.\n///\n/// @param {List} $query [block]\n///   List of arguments. Supported arguments are `nth-child` selectors (targets a specific pseudo element) and `auto` (targets `last-child`).\n///\n///   When passed an `nth-child` argument of type `*n` with `block` display, the omega mixin automatically adds a clear to the `*n+1` th element. Note that composite arguments such as `2n+1` do not support this feature.\n///\n///   **Deprecation warning**: The omega mixin will no longer take a `$direction` argument. To change the layout direction, use `row($direction)` or set `$default-layout-direction` instead.\n///\n/// @example scss - Usage\n///   .element {\n///     @include omega;\n///   }\n///\n///   .nth-element {\n///     @include omega(4n);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n) {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n+1) {\n///     clear: left;\n///   }\n\n@mixin omega($query: block, $direction: default) {\n  $table: belongs-to(table, $query);\n  $auto: belongs-to(auto, $query);\n\n  @if $direction != default {\n    @include -neat-warn(\"The omega mixin will no longer take a $direction argument. To change the layout direction, use the direction(){...} mixin.\");\n  } @else {\n    $direction: get-direction($layout-direction, $default-layout-direction);\n  }\n\n  @if $table {\n    @include -neat-warn(\"The omega mixin no longer removes padding in table layouts.\");\n  }\n\n  @if length($query) == 1 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n\n    @else if contains-display-value($query) and $table == false {\n      margin-#{$direction}: 0;\n    }\n\n    @else {\n      @include nth-child($query, $direction);\n    }\n  } @else if length($query) == 2 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    } @else {\n      @include nth-child(nth($query, 1), $direction);\n    }\n  } @else {\n    @include -neat-warn(\"Too many arguments passed to the omega() mixin.\");\n  }\n}\n\n@mixin nth-child($query, $direction) {\n  $opposite-direction: get-opposite-direction($direction);\n\n  &:nth-child(#{$query}) {\n    margin-#{$direction}: 0;\n  }\n\n  @if type-of($query) == number and unit($query) == \"n\" {\n    &:nth-child(#{$query}+1) {\n      clear: $opposite-direction;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n/// Designates the element as a row of columns in the grid layout. It clears the floats on the element and sets its display property. Rows can't be nested, but there can be more than one row element—with different display properties—per layout.\n///\n/// @param {String} $display [default]\n///  Sets the display property of the element and the display context that will be used by its children. Can be `block` or `table`.\n///\n/// @param {String} $direction [$default-layout-direction]\n///  Sets the layout direction. Can be `LTR` (left-to-right) or `RTL` (right-to-left).\n///\n/// @example scss - Usage\n///  .element {\n///    @include row();\n///  }\n///\n/// @example css - CSS Output\n///  .element {\n///    *zoom: 1;\n///    display: block;\n///  }\n///\n/// .element:before, .element:after {\n///   content: \" \";\n///   display: table;\n/// }\n///\n/// .element:after {\n///   clear: both;\n/// }\n\n@mixin row($display: default, $direction: $default-layout-direction) {\n  @if $direction != $default-layout-direction {\n    @include -neat-warn(\"The $direction argument will be deprecated in future versions in favor of the direction(){...} mixin.\");\n  }\n\n  $layout-direction: $direction !global;\n\n  @if $display != default {\n    @include -neat-warn(\"The $display argument will be deprecated in future versions in favor of the display(){...} mixin.\");\n  }\n\n  @if $display == table {\n    display: table;\n    @include fill-parent;\n    table-layout: fixed;\n    $container-display-table: true !global;\n  } @else {\n    @include clearfix;\n    display: block;\n    $container-display-table: false !global;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Forces the element to fill its parent container.\n///\n/// @example scss - Usage\n///   .element {\n///     @include fill-parent;\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     width: 100%;\n///     box-sizing: border-box;\n///   }\n\n@mixin fill-parent() {\n  width: 100%;\n\n  @if $border-box-sizing == false {\n    box-sizing: border-box;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Translates an element horizontally by a number of columns. Positive arguments shift the element to the active layout direction, while negative ones shift it to the opposite direction.\n///\n/// @param {Number (unitless)} $n-columns [1]\n///   Number of columns by which the element shifts.\n///\n/// @example scss - Usage\n///   .element {\n///     @include shift(-3);\n///   }\n///\n/// @example css - CSS output\n///   .element {\n///     margin-left: -25.58941%;\n///   }\n\n@mixin shift($n-columns: 1) {\n  @include shift-in-context($n-columns);\n}\n\n/// Translates an element horizontally by a number of columns, in a specific nesting context.\n///\n/// @param {List} $shift\n///   A list containing the number of columns to shift (`$columns`) and the number of columns of the parent element (`$container-columns`).\n///\n///   The two values can be separated with any string such as `of`, `/`, etc.\n///\n/// @example scss - Usage\n///   .element {\n///     @include shift(-3 of 6);\n///   }\n///\n/// @example css - CSS output\n///   .element {\n///     margin-left: -52.41458%;\n///   }\n\n@mixin shift-in-context($shift: $columns of $container-columns) {\n  $n-columns: nth($shift, 1);\n  $parent-columns: container-shift($shift) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  margin-#{$opposite-direction}: $n-columns * flex-grid(1, $parent-columns) + $n-columns * flex-gutter($parent-columns);\n\n  // Reset nesting context\n  $parent-columns: $grid-columns !global;\n}\n","// Not function for Libsass compatibility\n// https://github.com/sass/libsass/issues/368\n@function is-not($value) {\n  @return if($value, false, true);\n}\n\n// Checks if a number is even\n@function is-even($int) {\n  @return $int % 2 == 0;\n}\n\n// Checks if an element belongs to a list or not\n@function belongs-to($tested-item, $list) {\n  @return is-not(not-belongs-to($tested-item, $list));\n}\n\n@function not-belongs-to($tested-item, $list) {\n  @return is-not(index($list, $tested-item));\n}\n\n// Contains display value\n@function contains-display-value($query) {\n  @return belongs-to(table, $query)\n       or belongs-to(block, $query)\n       or belongs-to(inline-block, $query)\n       or belongs-to(inline, $query);\n}\n\n// Parses the first argument of span-columns()\n@function container-span($span: $span) {\n  @if length($span) == 3 {\n    $container-columns: nth($span, 3);\n    @return $container-columns;\n  } @else if length($span) == 2 {\n    $container-columns: nth($span, 2);\n    @return $container-columns;\n  }\n\n  @return $grid-columns;\n}\n\n@function container-shift($shift: $shift) {\n  $parent-columns: $grid-columns !default !global;\n\n  @if length($shift) == 3 {\n    $container-columns: nth($shift, 3);\n    @return $container-columns;\n  } @else if length($shift) == 2 {\n    $container-columns: nth($shift, 2);\n    @return $container-columns;\n  }\n\n  @return $parent-columns;\n}\n\n// Generates a striped background\n@function gradient-stops($grid-columns, $color: $visual-grid-color) {\n  $transparent: transparent;\n\n  $column-width: flex-grid(1, $grid-columns);\n  $gutter-width: flex-gutter($grid-columns);\n  $column-offset: $column-width;\n\n  $values: ($transparent 0, $color 0);\n\n  @for $i from 1 to $grid-columns*2 {\n    @if is-even($i) {\n      $values: append($values, $transparent $column-offset, comma);\n      $values: append($values, $color $column-offset, comma);\n      $column-offset: $column-offset + $column-width;\n    } @else {\n      $values: append($values, $color $column-offset, comma);\n      $values: append($values, $transparent $column-offset, comma);\n      $column-offset: $column-offset + $gutter-width;\n    }\n  }\n\n  @return $values;\n}\n\n// Layout direction\n@function get-direction($layout, $default) {\n  $direction: null;\n\n  @if to-upper-case($layout) == \"LTR\" or to-upper-case($layout) == \"RTL\" {\n    $direction: direction-from-layout($layout);\n  } @else {\n    $direction: direction-from-layout($default);\n  }\n\n  @return $direction;\n}\n\n@function direction-from-layout($layout) {\n  $direction: null;\n\n  @if to-upper-case($layout) == \"LTR\" {\n    $direction: right;\n  } @else {\n    $direction: left;\n  }\n\n  @return $direction;\n}\n\n@function get-opposite-direction($direction) {\n  $opposite-direction: left;\n\n  @if $direction == \"left\" {\n    $opposite-direction: right;\n  }\n\n  @return $opposite-direction;\n}\n","@charset \"UTF-8\";\n\n/// Outputs a media-query block with an optional grid context (the total number of columns used in the grid).\n///\n/// @param {List} $query\n///   A list of media query features and values, where each `$feature` should have a corresponding `$value`.\n///   For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).\n///\n///   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.\n///\n///   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`).\n///\n///\n/// @param {Number (unitless)} $total-columns [$grid-columns]\n///   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.\n///\n/// @example scss - Usage\n///   .responsive-element {\n///      @include media(769px) {\n///        @include span-columns(6);\n///      }\n///   }\n///\n///  .new-context-element {\n///    @include media(min-width 320px max-width 480px, 6) {\n///      @include span-columns(6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///  @media screen and (min-width: 769px) {\n///    .responsive-element {\n///      display: block;\n///      float: left;\n///      margin-right: 2.35765%;\n///      width: 48.82117%;\n///    }\n///\n///    .responsive-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n///\n///  @media screen and (min-width: 320px) and (max-width: 480px) {\n///    .new-context-element {\n///      display: block;\n///      float: left;\n///      margin-right: 4.82916%;\n///      width: 100%;\n///    }\n///\n///    .new-context-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n\n@mixin media($query: $feature $value $columns, $total-columns: $grid-columns) {\n  @if length($query) == 1 {\n    @media screen and ($default-feature: nth($query, 1)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns !global;\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  } @else {\n    $loop-to: length($query);\n    $media-query: \"screen and \";\n    $default-grid-columns: $grid-columns;\n    $grid-columns: $total-columns !global;\n\n    @if is-not(is-even(length($query))) {\n      $grid-columns: nth($query, $loop-to) !global;\n      $loop-to: $loop-to - 1;\n    }\n\n    $i: 1;\n    @while $i <= $loop-to {\n      $media-query: $media-query + \"(\" + nth($query, $i) + \": \" + nth($query, $i + 1) + \") \";\n\n      @if ($i + 1) != $loop-to {\n        $media-query: $media-query + \"and \";\n      }\n\n      $i: $i + 2;\n    }\n\n    @media #{$media-query} {\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  }\n}\n"]}